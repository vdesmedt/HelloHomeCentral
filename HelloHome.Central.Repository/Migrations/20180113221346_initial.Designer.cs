// <auto-generated />
using HelloHome.Central.Domain.Entities;
using HelloHome.Central.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace HelloHome.Central.Repository.Migrations
{
    [DbContext(typeof(HhDbContext))]
    [Migration("20180113221346_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Sequence");

                    b.Property<int>("TriggerId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("TriggerId");

                    b.ToTable("Action");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastSeen");

                    b.Property<byte>("RfAddress");

                    b.Property<byte>("RfNetwork");

                    b.Property<long>("Signature");

                    b.HasKey("Id");

                    b.HasIndex("RfAddress")
                        .IsUnique();

                    b.ToTable("Node");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeAggregatedData", b =>
                {
                    b.Property<int>("Id");

                    b.Property<float?>("AtmosphericPressure");

                    b.Property<float?>("Humidity");

                    b.Property<float>("MaxUpTimeRaw");

                    b.Property<int>("Rssi");

                    b.Property<int>("SendErrorCount");

                    b.Property<DateTime>("StartupTime");

                    b.Property<float?>("Temperature");

                    b.Property<float?>("VIn");

                    b.HasKey("Id");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Discr");

                    b.Property<int>("NodeId");

                    b.Property<int>("Rssi");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeHistory");

                    b.HasDiscriminator<int>("Discr");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data")
                        .HasMaxLength(255);

                    b.Property<int>("NodeId");

                    b.Property<DateTime>("Time");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("nodelog");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeMetadata", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("EmonCmsNodeId");

                    b.Property<byte>("EnvironmentFrequency");

                    b.Property<byte>("ExtraFeatures");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(50);

                    b.Property<byte>("NodeInfoFrequency");

                    b.Property<int>("NodeType");

                    b.Property<string>("Version")
                        .HasColumnName("Version")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Node");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<int>("NodeId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Port");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Trigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Trigger");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Action");

                    b.Property<int?>("ActuatorId");

                    b.HasIndex("ActuatorId");

                    b.ToTable("Action");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScheduleAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Action");

                    b.Property<TimeSpan>("Delay");

                    b.Property<int?>("ScheduledActionId");

                    b.HasIndex("ScheduledActionId");

                    b.ToTable("Action");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.EnvironmentDataHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.NodeHistory");

                    b.Property<float?>("Humidity");

                    b.Property<int?>("Pressure");

                    b.Property<float?>("Temperature");

                    b.ToTable("EnvironmentDataHistory");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHealthHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.NodeHistory");

                    b.Property<int>("SendErrorCount");

                    b.Property<float?>("VIn");

                    b.ToTable("NodeHealthHistory");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.NodeHistory");

                    b.Property<bool>("IsOffset");

                    b.Property<int>("NewPulses");

                    b.Property<int>("PulseSensorPortId");

                    b.Property<int>("Total");

                    b.HasIndex("PulseSensorPortId");

                    b.ToTable("PulseHistory");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Port");


                    b.ToTable("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Port");


                    b.ToTable("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.CronTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Trigger");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(20);

                    b.ToTable("Trigger");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Trigger");

                    b.Property<int?>("SensorPortId");

                    b.HasIndex("SensorPortId");

                    b.ToTable("Trigger");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.ActuatorAction");


                    b.ToTable("Action");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayActuatorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.ActuatorPort");


                    b.ToTable("Port");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("PulseCount");

                    b.ToTable("Port");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");


                    b.ToTable("Port");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<bool>("State");

                    b.ToTable("Port");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("Value");

                    b.ToTable("Port");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");


                    b.ToTable("Trigger");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");

                    b.Property<bool?>("TriggerOnState");

                    b.ToTable("SwitchTrigger");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");

                    b.Property<int>("MinDelta");

                    b.ToTable("VarioTrigger");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TurnOffAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.RelayAction");


                    b.ToTable("Action");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TurnOnAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.RelayAction");


                    b.ToTable("Action");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Action", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Trigger", "Trigger")
                        .WithMany("Actions")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeAggregatedData", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", "Node")
                        .WithOne("AggregatedData")
                        .HasForeignKey("HelloHome.Central.Domain.Entities.NodeAggregatedData", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", "Node")
                        .WithMany("NodeHistory")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeLog", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node")
                        .WithMany("Logs")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeMetadata", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", "Node")
                        .WithOne("Metadata")
                        .HasForeignKey("HelloHome.Central.Domain.Entities.NodeMetadata", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Port", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", "Node")
                        .WithMany("Ports")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorAction", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.ActuatorPort", "Actuator")
                        .WithMany()
                        .HasForeignKey("ActuatorId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScheduleAction", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Action", "ScheduledAction")
                        .WithMany()
                        .HasForeignKey("ScheduledActionId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.PulseSensorPort", "PulseSensorPort")
                        .WithMany("PulseHistory")
                        .HasForeignKey("PulseSensorPortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorTrigger", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.SensorPort", "SensorPort")
                        .WithMany("Triggers")
                        .HasForeignKey("SensorPortId");
                });
#pragma warning restore 612, 618
        }
    }
}
