// <auto-generated />
using System;
using HelloHome.Central.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HelloHome.Central.Repository.Migrations
{
    [DbContext(typeof(HhDbContext))]
    partial class HhDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("TriggerId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.HasIndex("TriggerId");

                    b.ToTable("Action");

                    b.HasDiscriminator<string>("Type").HasValue("Action");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.ToTable("Condition");

                    b.HasDiscriminator<string>("Type").HasValue("Condition");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RfAddress")
                        .HasColumnType("int");

                    b.Property<long>("Signature")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RfAddress")
                        .IsUnique();

                    b.ToTable("Node");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("nodelog");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<byte>("PortNumber")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("Port");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Discr")
                        .HasColumnType("int");

                    b.Property<int>("PortId")
                        .HasColumnType("int");

                    b.Property<int>("Rssi")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PortHistory");

                    b.HasDiscriminator<int>("Discr");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Script", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("OnFinnishId")
                        .HasColumnType("int");

                    b.Property<int>("TriggerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OnFinnishId");

                    b.HasIndex("TriggerId");

                    b.ToTable("Script");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScriptAction", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.HasKey("ScriptId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("ScriptAction");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScriptCondition", b =>
                {
                    b.Property<int>("ScriptId")
                        .HasColumnType("int");

                    b.Property<int>("ConditionId")
                        .HasColumnType("int");

                    b.HasKey("ScriptId", "ConditionId");

                    b.HasIndex("ConditionId");

                    b.ToTable("ScriptCondition");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Trigger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trigger");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Action");

                    b.Property<int?>("ActuatorId")
                        .HasColumnType("int");

                    b.HasIndex("ActuatorId");

                    b.HasDiscriminator().HasValue("AA");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScheduleAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Action");

                    b.Property<TimeSpan>("Delay")
                        .HasColumnType("time(6)");

                    b.Property<int?>("ScheduledActionId")
                        .HasColumnType("int");

                    b.HasIndex("ScheduledActionId");

                    b.HasDiscriminator().HasValue("SC");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.EnvironmentSensorPort>", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Condition");

                    b.Property<int>("PortId")
                        .HasColumnType("int")
                        .HasColumnName("PortId");

                    b.HasIndex("PortId");

                    b.HasDiscriminator().HasValue("PortBasedCondition<EnvironmentSensorPort>");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.RelayActuatorPort>", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Condition");

                    b.Property<int>("PortId")
                        .HasColumnType("int")
                        .HasColumnName("PortId");

                    b.HasIndex("PortId");

                    b.HasDiscriminator().HasValue("PortBasedCondition<RelayActuatorPort>");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.SwitchSensorPort>", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Condition");

                    b.Property<int>("PortId")
                        .HasColumnType("int")
                        .HasColumnName("PortId");

                    b.HasIndex("PortId");

                    b.HasDiscriminator().HasValue("PortBasedCondition<SwitchSensorPort>");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TimeOfTheDayCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Condition");

                    b.Property<TimeSpan>("From")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("To")
                        .HasColumnType("time(6)");

                    b.HasDiscriminator().HasValue("TimeOfTheDayCondition");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.LoggingPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.EnvironmentHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<float?>("Humidity")
                        .HasColumnType("float");

                    b.Property<float?>("Pressure")
                        .HasColumnType("float");

                    b.Property<float?>("Temperature")
                        .HasColumnType("float");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.FloatDataLogPortHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<float>("Data")
                        .HasColumnType("float")
                        .HasColumnName("FloatLogData");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.IntDataLogPortHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<int>("Data")
                        .HasColumnType("int")
                        .HasColumnName("IntLogData");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHealthHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<int>("SendErrorCount")
                        .HasColumnType("int");

                    b.Property<float?>("VIn")
                        .HasColumnType("float");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<bool>("IsOffset")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NewPulses")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushButtonHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<int>("PressStyle")
                        .HasColumnType("int")
                        .HasColumnName("NewSensorState");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchPortHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<int>("NewSensorState")
                        .HasColumnType("int")
                        .HasColumnName("NewSensorState");

                    b.HasIndex("PortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioButtonPortHistory", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortHistory");

                    b.Property<int>("NewLevel")
                        .HasColumnType("int")
                        .HasColumnName("NewSensorState");

                    b.HasIndex("PortId");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.CronTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Trigger");

                    b.Property<string>("CronExpression")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.Trigger");

                    b.Property<int>("SensorPortId")
                        .HasColumnType("int");

                    b.HasIndex("SensorPortId");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.ActuatorAction");

                    b.HasDiscriminator().HasValue("RA");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TemperatureWithinRangeCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.EnvironmentSensorPort>");

                    b.Property<float>("MaxTemperature")
                        .HasColumnType("float");

                    b.Property<float>("MinTemperature")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("TemperatureWithinRangeCondition");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayOffCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.RelayActuatorPort>");

                    b.HasDiscriminator().HasValue("RF");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayOnCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.RelayActuatorPort>");

                    b.HasDiscriminator().HasValue("RN");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchOffCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.SwitchSensorPort>");

                    b.HasDiscriminator().HasValue("TD");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchOnCondition", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.SwitchSensorPort>");

                    b.HasDiscriminator().HasValue("SN");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.RelayActuatorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.ActuatorPort");

                    b.Property<int>("RelayState")
                        .HasColumnType("int")
                        .HasColumnName("PortState");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.FloatDataLogPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.LoggingPort");

                    b.Property<float>("Data")
                        .HasColumnType("float")
                        .HasColumnName("FloatLogData");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.IntDataLogPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.LoggingPort");

                    b.Property<int>("Data")
                        .HasColumnType("int")
                        .HasColumnName("IntLogData");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.EnvironmentSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<float>("AtmPressure")
                        .HasColumnType("float");

                    b.Property<float>("Humidity")
                        .HasColumnType("float");

                    b.Property<float>("Temperature")
                        .HasColumnType("float");

                    b.Property<int>("UpdateFrequency")
                        .HasColumnType("int")
                        .HasColumnName("EnvUpdateFreq");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHealthSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("SendError")
                        .HasColumnType("int");

                    b.Property<int>("UpdateFrequency")
                        .HasColumnType("int")
                        .HasColumnName("HealtUpdateFreq");

                    b.Property<float>("VIn")
                        .HasColumnType("float");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("PulseCount")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("LastPressStyle")
                        .HasColumnType("int")
                        .HasColumnName("PortState");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("SwitchState")
                        .HasColumnType("int")
                        .HasColumnName("PortState");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioSensorPort", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorPort");

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("PortState");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");

                    b.Property<int?>("PressStyle")
                        .HasColumnType("int");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");

                    b.Property<bool?>("TriggerOnState")
                        .HasColumnType("tinyint(1)");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioTrigger", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.SensorTrigger");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TurnOffAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.RelayAction");

                    b.HasDiscriminator().HasValue("TF");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.TurnOnAction", b =>
                {
                    b.HasBaseType("HelloHome.Central.Domain.Entities.RelayAction");

                    b.HasDiscriminator().HasValue("TN");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Action", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Trigger", "Trigger")
                        .WithMany("Actions")
                        .HasForeignKey("TriggerId");

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Node", b =>
                {
                    b.OwnsOne("HelloHome.Central.Domain.Entities.NodeAggregatedData", "AggregatedData", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("int");

                            b1.Property<float?>("AtmosphericPressure")
                                .HasColumnType("float");

                            b1.Property<float?>("Humidity")
                                .HasColumnType("float");

                            b1.Property<float>("MaxUpTimeRaw")
                                .HasColumnType("float");

                            b1.Property<int>("NodeStartCount")
                                .HasColumnType("int");

                            b1.Property<int>("Rssi")
                                .HasColumnType("int");

                            b1.Property<int>("SendErrorCount")
                                .HasColumnType("int");

                            b1.Property<DateTime>("StartupTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<float?>("Temperature")
                                .HasColumnType("float");

                            b1.Property<float?>("VIn")
                                .HasColumnType("float");

                            b1.HasKey("NodeId");

                            b1.ToTable("Node");

                            b1.WithOwner("Node")
                                .HasForeignKey("NodeId");

                            b1.Navigation("Node");
                        });

                    b.OwnsOne("HelloHome.Central.Domain.Entities.NodeMetadata", "Metadata", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("int");

                            b1.Property<short>("ExtraFeatures")
                                .HasColumnType("smallint");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasColumnName("Name");

                            b1.Property<int>("NodeType")
                                .HasColumnType("int");

                            b1.Property<string>("Version")
                                .HasMaxLength(10)
                                .HasColumnType("varchar(10)")
                                .HasColumnName("Version");

                            b1.HasKey("NodeId");

                            b1.ToTable("Node");

                            b1.WithOwner("Node")
                                .HasForeignKey("NodeId");

                            b1.Navigation("Node");
                        });

                    b.Navigation("AggregatedData");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeLog", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", null)
                        .WithMany("Logs")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Port", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Node", "Node")
                        .WithMany("Ports")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Node");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Script", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Script", "OnFinnish")
                        .WithMany()
                        .HasForeignKey("OnFinnishId");

                    b.HasOne("HelloHome.Central.Domain.Entities.Trigger", "Trigger")
                        .WithMany("Scripts")
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnFinnish");

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScriptAction", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelloHome.Central.Domain.Entities.Script", "Script")
                        .WithMany("Actions")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScriptCondition", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HelloHome.Central.Domain.Entities.Script", "Script")
                        .WithMany("Conditions")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ActuatorAction", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.ActuatorPort", "Actuator")
                        .WithMany()
                        .HasForeignKey("ActuatorId");

                    b.Navigation("Actuator");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.ScheduleAction", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.Action", "ScheduledAction")
                        .WithMany()
                        .HasForeignKey("ScheduledActionId");

                    b.Navigation("ScheduledAction");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.EnvironmentSensorPort>", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.EnvironmentSensorPort", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Condition_Port_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.RelayActuatorPort>", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.RelayActuatorPort", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Condition_Port_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PortBasedCondition<HelloHome.Central.Domain.Entities.SwitchSensorPort>", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.SwitchSensorPort", "Port")
                        .WithMany()
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Condition_Port_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.EnvironmentHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.EnvironmentSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.FloatDataLogPortHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.FloatDataLogPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.IntDataLogPortHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.IntDataLogPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHealthHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.NodeHealthSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.PulseSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushButtonHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.PushSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchPortHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.SwitchSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioButtonPortHistory", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.VarioSensorPort", "Port")
                        .WithMany("History")
                        .HasForeignKey("PortId")
                        .HasConstraintName("FK_Port_PortHistory_PortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Port");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorTrigger", b =>
                {
                    b.HasOne("HelloHome.Central.Domain.Entities.SensorPort", "SensorPort")
                        .WithMany("Triggers")
                        .HasForeignKey("SensorPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SensorPort");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Node", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Ports");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Script", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.Trigger", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Scripts");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SensorPort", b =>
                {
                    b.Navigation("Triggers");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.FloatDataLogPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.IntDataLogPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.EnvironmentSensorPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.NodeHealthSensorPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PulseSensorPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.PushSensorPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.SwitchSensorPort", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("HelloHome.Central.Domain.Entities.VarioSensorPort", b =>
                {
                    b.Navigation("History");
                });
#pragma warning restore 612, 618
        }
    }
}
